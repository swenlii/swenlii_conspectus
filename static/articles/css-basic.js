let code = `<p><b>CSS</b> <em>(Cascading Style Sheets, каскадные таблицы стилей)</em> - набор параметров форматирования, который применяется к элементам документа, чтобы изменить их внешний вид. Это язык, с помощью которого мы определяем внешний вид сайта.</p>
<p>Отличная документация: https://webref.ru/css</p>
<p>Именно с помощью css можно сделать текст зеленым, кнопку круглой, а картинку заставить двигаться. CSS - это инструмент волшебника: вся страница без css черно белая, унылая и нет красивых эффектов. Но стоит добавить немного css и страница заиграет новыми красками, элементы начнут двигаться и отзываться на действия пользователя. </p>
<p>Сам css код создается с помощью селектора, его свойств и значений этих свойств в следующем формате:</p>
<pre><code>селектор {
  свойство: значение; /* коментарий */
  свойство: значение;
}
</code></pre>
<p><b>Селектор</b> - метод обращения к элементу. Это может быть обращение ко всем заголовкам, например селектор h2, или обращение по классу (из html мы знаем, что у каждого элемента есть атрибут class, именно по этому классу и можно обращаться) или по id (индивидуальное имя тега, оно не может повторятся, такое имя может быть только одно на один html файл)</p>
<p><b>Свойства</b> - это свойства объекта, к которому мы обратились. Они могут быть совершенно разные: цвет текста, фон элемента, шрифт и так далее.</p>
<p>Значения некоторых свойств элементов (такие как цвет шрифта или выравнивание текста) определены по умолчанию браузером. Причем у разных браузеров значения этих свойств могут различаться. Именно поэтому так важно проверять свою страницу на разных устройствах.</p>
<h2 id="art-point-1">ПОДКЛЮЧЕНИЕ</h2>
CSS и HTML неразделимы друг от друга. Тем не менее, браузеру при открытии html нужно дать понять, что в паре с ним идет еще и css.
<h5 id="art-point-2">Подключить css к html можно тремя способами</h5>
<ul>
  <li>через <code class="inline-code">&lt;style&gt;</code> тег. Просто пишите css внутри: <code class="inline-code">&lt;style&gt; p{ color:red; } &lt;/style&gt;</code> (Заметьте, что рекомендуется заканчивать style знаком ";".)</li>
  <li>через <code class="inline-code">&lt;link&gt;</code> тег. Подключите файл style.css: <code class="inline-code">&lt;link rel="stylesheet" href="...style.css"&gt;</code></li>
  <li>через атрибут style. Примените стиль непосредственно к тегу: <code class="inline-code">&lt;p style="color:red;"&gt;</code></li>
</ul>
<h2 id="art-point-3">ЕДИНИЦЫ ИЗМЕРЕНИЯ</h2>
В css есть единицы измерения, есть <code class="inline-code">%, px, cm, mm, em, rem, vh, vw</code> и другие. Они делятся на абсолютные(физические, <code class="inline-code">px</code>, <code class="inline-code">cm</code>...) и относительные(<code class="inline-code">%</code>, <code class="inline-code">em</code>...). 
Есть очень важные единицы измерения, о которых нужно помнить. Из абсолютных чаще всего используется px. Остальные (cm, mm, in) реже. Из относительных стоит знать о em и rem. Итак, важные для заучивания единицы измерения.
<h5 id="art-point-4">Важные единицы измерения</h5>
<ul>
  <li><code class="inline-code">px</code> - один пиксель на экране</li>
  <li><code class="inline-code">em</code> - если шрифт - относительно шрифта родителя, если другое - относительно шрифта себя,</li>
  <li><code class="inline-code">rem</code> - относительно шрифта корневого элемента</li>
  <li><code class="inline-code">%</code> - чаще всего относительно родителя</li>
  <li><code class="inline-code">vw</code> - % от ширины области просмотра</li>
  <li><code class="inline-code">vh</code> - % от высоты области просмотра</li>
</ul>
<div class="note">
  <div>
    <img src="/images/icons/pencil.webp">
  </div>
  <div>
    <span>Заметка</span>
    <p>Единицы измерения можно вычислять с помощью функции <b>calc</b>: <code class="inline-code">calc(90% - 30px)</code></p>
  </div>
</div>
Подробнее о <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units">единицах измерени</a>
<h2 id="art-point-5">НАСЛЕДОВАНИЕ</h2>
<div class="info">
  <div>
    <img src="/images/icons/info.webp">
  </div>
  <div>
    <span>Наследование</span>
    <p><b>Наследование</b> в css, это когда применяешь стиль к одному тегу, а всем вложенным тегам этот стиль применяется так же, но только если это же значение (например color) у вложенного тега не переопределен. </p>
  </div>
</div>
<pre><code>&lt;body class=&quot;red&quot;&gt;
  &lt;h1&gt;Кот&lt;/h1&gt;
  &lt;h2&gt;Пес&lt;/h2&gt;
  &lt;h3 class=&quot;green&quot;&gt;Попугай&lt;/h3&gt;
&lt;/body&gt;
&lt;!--Кот и пес будут красными, а попугай зеленым--&gt;
</code></pre>
Наследуются не все свойства, а только те, которые могут наследоваться. Подробно по этой ссылке: <a href="https://www.w3.org/TR/CSS22/propidx.html">https://www.w3.org/TR/CSS22/propidx.html</a>, но в основном это свойства текста (цвет, шрифт, размер, подчеркивание и др.), а основные не наследуемые - изменяющие внешний вид элемента (фон, рамка, отступы, размер, позиция и др.). 
<h2 id="art-point-6">КАСКАДНОСТЬ</h2>
<div class="info">
  <div>
    <img src="/images/icons/info.webp">
  </div>
  <div>
    <span>Каскадность</span>
    <p><b>Каскадность</b> - основа css, означает вот что: есть стили браузеров, есть стили по тегам и есть стили по классам. У одного тега применяется сначала браузерный стиль, потом сверху накладывается стиль по тегам (переопределяя некоторые свойства), а сверху стиль по классам, так же переопределяя стиль. Таким образом, если в браузере шрифт черный, у тега он синий, а в классе он красный, в итоговом собранном стиле шрифт будет красным.</p>
  </div>
</div>
Кстати, такой вот случай, как эта ситуация, называется <b>конфликтом</b>. Этот конфликт разрешается браузером за 3 шага (какой шаг сработал, та таком и остановимся)
<h5 id="art-point-7">Решение конфликтов</h5>
<ol>
  <li><b>Приоритет класса</b> (стиль, что написан нами приоритетнее браузерных, заданный стиль приоритетнее унаследованного)</li>
  <li><b>Специфичность селектора</b> (например, стиль по классам специфичнее стиля по тегам или стиль по тегу и классу специфичнее стиля просто по классу)</li>
  <li>Побеждает то свойство, что в итоговой сборке будет <b>ниже другого</b> (когда браузер собирает наши файлы в один большой файл, то что окажется последним - выйграет)</li>
</ol>
В ситуации выше браузер остановился на втором шаге. Конфликт может возникнуть и внутри стиля. В таком случае действует только 3 правило.
<h2 id="art-point-8">Что дальше?</h2>
<p>Далее мы рассмотрим:</p>
<ul>
  <li>Цвета CSS</li>
  <li>Классы</li>
  <li>Свойства</li>
  <li>Анимация</li>
  <li>Позиционирование</li>
  <li>Фильтры</li>
  <li>и многое другое...</li>
</ul>
`; export {code}